---
layout: default

# keep it short! shown in the header
title: Text-To-Play Realtime Polls

# these are all optional and add links to the footer
repo: learnwithjason/twilio-text-to-vote
episode: https://www.learnwithjason.dev/text-to-play-games-with-twilio
# tutorial: https://codepen.io/jlengstorf/pen/QWbdLjb
---

<style>
  svg {
    margin: 2em;
    overflow: visible;
  }
</style>

<h1>Twilio Poll: Is Pizza a Sandwich?</h1>

<div class="poll">
  <div class="chart"></div>
  <h3>Text +1 406 356 0389 to vote!</h3>
</div>

<script src="https://unpkg.com/d3@5.16.0/dist/d3.min.js"></script>
<script src="https://media.twiliocdn.com/sdk/js/sync/v0.12/twilio-sync.min.js"></script>
<script>
  function updateResults(values) {
    const data = Object.entries(values).map(([name, value]) => ({
      name,
      value,
    }));
    buildChart(data);
  }

  const svg = d3.select('.chart').append('svg');

  function buildChart(data) {
    const widthScale = d3
      .scaleLinear()
      .domain([0, d3.max(data, (d) => d.value)])
      .range([0, 350]);

    const y = d3
      .scaleBand()
      .domain(data.map((v) => v.name))
      .rangeRound([0, 100])
      .padding(0.1);

    const bars = svg
      .selectAll('g')
      .data(data, (d) => d.name)
      .join('g')
      .attr('transform', (d) => `translate(0, ${y(d.name)})`);

    bars
      .append('rect')
      .attr('height', y.bandwidth())
      .attr('fill', '#d459ab')
      .attr('width', (d) => widthScale(d.value));

    const text = bars
      .append('g')
      .attr('transform', `translate(0, ${y.bandwidth() / 2})`);

    text
      .append('text')
      .text((d) => d.name)
      .attr('x', -5)
      .attr('text-anchor', 'end')
      .attr('dy', '0.35em');

    text
      .append('text')
      .attr('dy', '0.35em')
      .transition(t)
      .text((d) => d.value)
      .attr('x', (d) => widthScale(d.value) + 5);

    // Nathaniel and I are SO sorry
    // const svg = d3.create('svg').attr('viewbox', [0, 0, 350, 100]);

    // svg
    //   .append('g')
    //   .attr('fill', 'steelblue')
    //   .selectAll('rect')
    //   .data(data)
    //   .join('rect')
    //   .attr('x', x(0))
    //   .attr('y', (_, i) => y(i))
    //   .attr('width', (d) => x(d.value) - x(0))
    //   .attr('height', y.bandwidth());

    // const chart = document.querySelector('.chart');
    // const oldChart = chart.querySelector('svg');
    // if (oldChart) chart.removeChild(oldChart);
    // chart.appendChild(svg.node());
  }

  async function getToken() {
    const token = await fetch(
      '/.netlify/functions/get-twilio-token'
    ).then((response) => response.text());

    const client = new Twilio.Sync.Client(token, { logLevel: 'info' });

    client.on('connectionStateChanged', (...rest) => {
      console.log({ rest });
    });

    const document = await client.document('LWJ Text To Vote');
    updateResults(document.value);

    document.on('updated', ({ value }) => {
      console.log(value);
      updateResults(value);
    });
  }

  getToken();
</script>
